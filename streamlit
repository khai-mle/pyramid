import os
import pandas as pd
import streamlit as st
from st_aggrid import AgGrid, GridOptionsBuilder, GridUpdateMode
from docx import Document

st.set_page_config(layout="wide")

# Load company data
def load_company_data():
    try:
        df = pd.read_csv("companies.csv")
        required_columns = ["ticker", "company name", "description", "sector", "industry", "sub-industry", "tag"]
        missing_columns = [col for col in required_columns if col not in df.columns]
        
        if missing_columns:
            st.error(f"Missing required columns in companies.csv: {', '.join(missing_columns)}")
            return None
        return df
    except Exception as e:
        st.error(f"Error loading companies.csv: {str(e)}")
        return None

company_df = load_company_data()

# Search functionality
st.title("Company Selection and Analysis Tool")
st.subheader("Search for a Company")
search_query = st.text_input("Enter company name or ticker:")

if company_df is not None:
    if search_query:
        filtered_df = company_df[
            company_df["company name"].str.contains(search_query, case=False, na=False) |
            company_df["ticker"].str.contains(search_query, case=False, na=False)
        ]
    else:
        filtered_df = company_df.copy()
    
    # Display search results in an interactive table
    st.subheader("Matching Companies")
    gb = GridOptionsBuilder.from_dataframe(filtered_df[["ticker", "company name", "description"]])
    gb.configure_selection('multiple', use_checkbox=True, header_checkbox=True)
    gb.configure_default_column(wrapText=True, sortable=True)
    grid_options = gb.build()
    grid_response = AgGrid(
        filtered_df, gridOptions=grid_options, update_mode=GridUpdateMode.SELECTION_CHANGED,
        height=400, width='100%', fit_columns_on_grid_load=True
    )
    
    selected_rows = grid_response.get("selected_rows", [])
    selected_tickers = [row["ticker"] for row in selected_rows] if selected_rows else []
    
    # Additional question box
    st.subheader("Additional Inquiry")
    user_question = st.text_area("What else do you want to ask about the selected companies?")
    
    # Download report button
    if selected_tickers and os.path.exists("report.docx"):
        with open("report.docx", "rb") as file:
            st.download_button(
                label="Download Report",
                data=file,
                file_name="company_analysis_report.docx",
                mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
            )
